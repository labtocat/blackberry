// Segmented control navigation project template
import bb.cascades 1.0
import com.rim.example.custom 1.0

NavigationPane {
    id: nav
    Page {
        content: Container {
            SegmentedControl {
                // define segmented control options here
                Option {
                    id: option1
                    text: qsTr("Basic")
                    value: 1
                    selected: true
                }
                Option {
                    id: option2
                    text: qsTr("Advanced")
                    imageSource: "asset:///images/picture1.png"
                    value: 2
                }
                // Option { id: option3; text: qsTr("Category 2"); imageSource: "asset:///images/picture2.png"; value: 2 }
                onSelectedOptionChanged: {
                    // write handler for the choosen selection here
                    if (selectedOption) myListModel.setFilter(selectedOption.value);
                }
                horizontalAlignment: HorizontalAlignment.Fill
            }
            ListView {
                id: listView
                dataModel: MyListModel {
                    id: myListModel
                }
                layout: GridListLayout {
                }
                listItemComponents: [
                    // define component which will represent list item GUI appearence
                    ListItemComponent {

                        //   list item GUI appearence component is defined in external MyListItem.qml file
                        MyListItem {
                        }
                    }
                ]

                onTriggered: {
                    
                  //  triggered( firstPage.qml)
                    
               //      imageSource: "asset:///images/picture1.png"
//                    console.log("selected_index: " + indexPath)
//                    var curr_item = dataModel.data(indexPath)
//                    // show detail page for selected item
//                    setDetailItem(curr_item)
                }
                horizontalAlignment: HorizontalAlignment.Center
                verticalAlignment: VerticalAlignment.Center
            }
        }
    }
    attachedObjects: [
        ComponentDefinition {
            id: secondPageDefinition
            content: Page {
                property alias text: lblText.text
                property alias image: imgView.imageSource
                id: pgDetail
                paneProperties: NavigationPaneProperties {
                    backButton: ActionItem {
                        onTriggered: {
                            navigationPane.pop();
                        }
                    }
                }
                content: Container {
                    layout: StackLayout {
                    }
                    Label {
                        id: lblText
                        textStyle.base: SystemDefaults.TextStyles.TitleText
                        //textStyle.color: Color.Yellow
                        horizontalAlignment: HorizontalAlignment.Center
                    }
                    ImageView {
                        id: imgView
                        scalingMethod: ScalingMethod.AspectFit
                        layoutProperties: StackLayoutProperties {
                            spaceQuota: 1.0 // the image fills rest of the Page
                        }
                        verticalAlignment: VerticalAlignment.Top
                        horizontalAlignment: HorizontalAlignment.Center
                    }
                    ScrollView {
                        verticalAlignment: content
                    }
                    TextArea {
                        enabled: false
                        layoutProperties: StackLayoutProperties {
                            spaceQuota: 2
                        }
                        text: "hagfsdkwdjwhgfukygwukfbwjbfuk3ygfjdbc jugbebecj"
                        textStyle {
                            base: SystemDefaults.TextStyles.BodyText
                        }
                    }
                }
            }
        }
    ]
    //                    function setDetailItem(item) {
    //                        // show detail page
    //                        var page = secondPageDefinition.createObject();
    //                        page.text = item.text
    //                        page.image = item.image
    //                        navigationPane.push(page)
    //                    }

    //                onTriggered: {
    //                    var chosenItem = dataModel.data(indexPath);
    //                    var page = nav.deprecatedPushQmlByString("Page.qml")
    //                }
    //                horizontalAlignment: HorizontalAlignment.Center
    //                verticalAlignment: VerticalAlignment.Center
    //            }
    //        }
    //    }

    //    attachedObjects: [
    //        ComponentDefinition {
    //            id: secondPageDefinition
    //            content: Page {
    //                property alias text: lblText.text
    //                property alias image: imgView.imageSource
    //                id: pgDetail
    //                paneProperties: NavigationPaneProperties {
    //                    backButton: ActionItem {
    //                        onTriggered: {
    //                            navigationPane.pop();
    //                        }
    //                    }
    //                }
    //                content: Container {
    //                    layout: StackLayout {
    //                    }
    //                    Label {
    //                        id: lblText
    //                        textStyle.base: SystemDefaults.TextStyles.TitleText
    //                        //textStyle.color: Color.Yellow
    //                        horizontalAlignment: HorizontalAlignment.Center
    //                    }
    //                    ImageView {
    //                        id: imgView
    //                        scalingMethod: ScalingMethod.AspectFit
    //                        layoutProperties: StackLayoutProperties {
    //                            spaceQuota: 1.0 // the image fills rest of the Page
    //                        }
    //                        verticalAlignment: VerticalAlignment.Center
    //                        horizontalAlignment: HorizontalAlignment.Center
    //                    }
    //                }
    //            }
    //        }
    //    ]
    //    function setDetailItem(item) {
    //        // show detail page
    //        var page = secondPageDefinition.createObject();
    //        page.text = item.text
    //        page.image = item.image
    //        navigationPane.push(page)
    //   }
    onCreationCompleted: {
        // this slot is called when declarative scene is created
        // write post creation initialization here
        console.log("Page - onCreationCompleted()")

        // enable layout to adapt to the device rotation
        // don't forget to enable screen rotation in bar-bescriptor.xml (Application->Orientation->Auto-orient)
        OrientationSupport.supportedDisplayOrientation = SupportedDisplayOrientation.All;

        // populate list view model with the sample data
        myListModel.load("app/native/assets/mydata.json")
    }
}
